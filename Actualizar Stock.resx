<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        /8CH///g////4A///+AP///wD///8A////AP///wB///8Af///8H///hA///AYP//AGB//wBwP/+AcB/
        /gPgH/gD8APAA/gAAAP8AAA//wAA///AA/8=
</value>
  </data>
</root>